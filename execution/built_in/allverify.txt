/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cd_built_in.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 16:06:14 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/05 12:08:09 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

static char	*get_home_path(t_data *data)
{
	char	*target_path;

	target_path = ft_list_getenv(data->env_list, "HOME");
	if (!target_path || target_path[0] == '\0')
	{
		ft_putstr_fd("minishell: cd: HOME not set\n", STDERR_FILENO);
		data->last_exit_status = EXIT_FAILURE;
		return (NULL);
	}
	return (target_path);
}

static char	*handle_dash_path(char *arg, t_data *data, int *print_flag)
{
	char	*target_path;

	*print_flag = FALSE;
	if (ft_strncmp(arg, "-", 2) == 0)
	{
		target_path = ft_list_getenv(data->env_list, "OLDPWD");
		if (!target_path || target_path[0] == '\0')
		{
			ft_putstr_fd("minishell: cd: OLDPWD not set\n", STDERR_FILENO);
			data->last_exit_status = EXIT_FAILURE;
			return (NULL);
		}
		*print_flag = TRUE;
		return (target_path);
	}
	return (arg);
}

int	update_pwd_env_vars(t_data *data, char *old_pwd_path)
{
	char	*new_pwd_path;
	int		ret1;
	int		ret2;

	ret1 = ft_list_setenv(&data->env_list, "OLDPWD", old_pwd_path);
	new_pwd_path = getcwd(NULL, 0);
	if (!new_pwd_path)
	{
		perror("minishell: cd: error retrieving new directory path");
		ft_list_setenv(&data->env_list, "PWD", "");
		return (-1);
	}
	ret2 = ft_list_setenv(&data->env_list, "PWD", new_pwd_path);
	free(new_pwd_path);
	if (ret1 == -1 || ret2 == -1)
	{
		ft_putstr_fd("minishell: cd: error update env variables\n", 2);
		return (-1);
	}
	return (0);
}

static char	*determine_cd_target(t_cmd *cmd, t_data *data,
								int *print_path_flag, char **path_to_free)
{
	char	*path_after_dash;

	*path_to_free = NULL;
	*print_path_flag = FALSE;
	if (cmd->argv[1])
	{
		path_after_dash = handle_dash_path(cmd->argv[1],
				data, print_path_flag);
		if (!path_after_dash)
			return (NULL);
		if (*print_path_flag == TRUE)
			return (path_after_dash);
		else
		{
			*path_to_free = expand_tilde_path(path_after_dash, data->env_list);
			if (!*path_to_free)
			{
				if (!ft_list_getenv(data->env_list, "HOME"))
					ft_putstr_fd("minishell: cd: HOME not set\n", 2);
				data->last_exit_status = EXIT_FAILURE;
				return (NULL);
			}
		}
	}
	return (*path_to_free);
}

int	ft_cd(t_cmd *cmd, t_data *data)
{
	char	*final_target_path;
	char	*allocated_path;
	int		print_path_flag;
	int		result;

	allocated_path = NULL;
	if (!cmd->argv[1])
		final_target_path = get_home_path(data);
	else
		final_target_path = determine_cd_target(cmd, data,
				&print_path_flag, &allocated_path);
	if (!final_target_path)
		return (EXIT_FAILURE);
	result = process_dir_change(final_target_path, data, print_path_flag);
	free(allocated_path);
	return (result);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cd_built_in_utils.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/04 14:21:27 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/04 21:14:12 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

int	process_dir_change(char *target, t_data *data, int print_path_flag)
{
	char	*current_pwd;
	int		chdir_ret;

	current_pwd = getcwd(NULL, 0);
	if (!current_pwd)
	{
		perror("minishell: cd: error retrieving current directory");
		data->last_exit_status = EXIT_FAILURE;
		return (EXIT_FAILURE);
	}
	chdir_ret = chdir(target);
	if (chdir_ret == -1)
		return (cd_error(target, data, current_pwd));
	if (print_path_flag)
		ft_putendl_fd(target, STDOUT_FILENO);
	if (update_pwd_env_vars(data, current_pwd) == -1)
	{
		free(current_pwd);
		data->last_exit_status = EXIT_FAILURE;
		return (EXIT_FAILURE);
	}
	free(current_pwd);
	data->last_exit_status = EXIT_SUCCESS;
	return (EXIT_SUCCESS);
}

int	cd_error(char *path, t_data *data, char *old_pwd_to_free)
{
	ft_putstr_fd("minishell: cd: ", STDERR_FILENO);
	ft_putstr_fd(path, STDERR_FILENO);
	ft_putstr_fd(": ", STDERR_FILENO);
	ft_putendl_fd(strerror(errno), STDERR_FILENO);
	free(old_pwd_to_free);
	data->last_exit_status = EXIT_FAILURE;
	return (EXIT_FAILURE);
}

static int	update_existing_env_node(t_env *node, const char *value)
{
	free(node->value);
	node->value = NULL;
	if (value)
	{
		node->value = ft_strdup(value);
		if (!node->value)
			return (-1);
	}
	return (0);
}

static int	add_new_env_node(t_env **list_head, t_env *last_node,
							const char *name, const char *value)
{
	char	*new_name;
	char	*new_value;
	t_env	*new_node;

	new_name = ft_strdup(name);
	if (!new_name)
		return (-1);
	new_value = NULL;
	if (value)
	{
		new_value = ft_strdup(value);
		if (!new_value)
			return (free(new_name), -1);
	}
	new_node = ft_tenv_new(new_name, new_value, 0);
	if (!new_node)
		return (free(new_name), free(new_value), -1);
	if (last_node)
		last_node->next = new_node;
	else
		*list_head = new_node;
	return (0);
}

int	ft_list_setenv(t_env **env_list_head, const char *name, const char *value)
{
	t_env	*curr;
	t_env	*last;
	size_t	name_len;

	curr = *env_list_head;
	last = NULL;
	name_len = ft_strlen(name);
	while (curr)
	{
		if (curr->name && ft_strncmp(curr->name, name, name_len + 1) == 0)
			return (update_existing_env_node(curr, value));
		last = curr;
		curr = curr->next;
	}
	return (add_new_env_node(env_list_head, last, name, value));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cd_built_in_utils2.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/04 21:14:43 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/05 11:55:34 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

char	*expand_tilde_path(const char *path_arg, t_env *env_list)
{
	char	*home_dir;
	char	*expanded_path;

	if (!path_arg)
		return (NULL);
	if (path_arg[0] != '~')
		return (ft_strdup(path_arg));
	home_dir = ft_list_getenv(env_list, "HOME");
	if (!home_dir || home_dir[0] == '\0')
		return (NULL);
	if (path_arg[1] == '\0')
		return (ft_strdup(home_dir));
	if (path_arg[1] == '/')
	{
		expanded_path = ft_strjoin(home_dir, path_arg + 1);
		if (!expanded_path)
			perror("minishell: cd: malloc failed");
		return (expanded_path);
	}
	else
		return (ft_strdup(path_arg));
}

char	*ft_list_getenv(t_env *env_list, const char *name)
{
	t_env	*curr;
	size_t	name_len;

	if (!env_list || !name)
		return (NULL);
	curr = env_list;
	name_len = ft_strlen(name);
	while (curr)
	{
		if (curr->name && ft_strncmp(curr->name, name, name_len + 1) == 0)
			return (curr->value);
		curr = curr->next;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   exit_built_in.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 16:06:22 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/02 22:43:32 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

int	ft_handle_exit_too_many_args(t_data *data)
{
	ft_putstr_fd("minishell: exit: too many argv\n", STDERR_FILENO);
	data->last_exit_status = 1;
	return (data->last_exit_status);
}

void	ft_handle_exit_numeric_error(t_cmd *cmd, t_data *data)
{
	(void)data;
	ft_putstr_fd("minishell: exit: ", STDERR_FILENO);
	if (cmd->argv[1])
		ft_putstr_fd(cmd->argv[1], STDERR_FILENO);
	ft_putstr_fd(": numeric argument required\n", STDERR_FILENO);
		// TODO: cleanup before exit
	exit(255);
}

static	int	handle_two_argument(t_cmd *cmd, t_data *data)
{
	int	exit_code_arg;
	int	exit_status;

	if (ft_valid_number(cmd->argv[1]))
	{
		exit_code_arg = ft_atoi(cmd->argv[1]);
		exit_status = (unsigned char)exit_code_arg;
		// TODO: cleanup
		exit(exit_status);
	}
	else
	{
		// TODO: cleanup
		ft_handle_exit_numeric_error(cmd, data);
		return (255);
	}
}

int	ft_exit(t_cmd *cmd, t_data *data)
{
	int	argc;
	int	exit_status;

	ft_putstr_fd("exit\n", STDERR_FILENO);
	argc = 0;
	while (cmd->argv[argc])
		argc++;
	if (argc == 1)
	{
		exit_status = (unsigned char)data->last_exit_status;
		// TODO: cleanup
		exit(exit_status);
	}
	if (argc == 2)
		return (handle_two_argument(cmd, data));
	else
		return (ft_handle_exit_too_many_args(data));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pwd_built_in.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 15:10:19 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/03 20:41:43 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

int	ft_pwd(t_cmd *cmd, t_data *data)
{
	char	*pwd;

	(void)cmd;
	pwd = NULL;
	pwd = getcwd(NULL, 0);
	if (!pwd)
	{
		perror("getcwd function failed: ");
		data->last_exit_status = EXIT_FAILURE;
		return (free(pwd), pwd = NULL, EXIT_FAILURE);
	}
	ft_putstr_fd(pwd, STDOUT_FILENO);
	ft_putstr_fd("\n", STDOUT_FILENO);
	free(pwd);
	pwd = NULL;
	data->last_exit_status = EXIT_SUCCESS;
	return (EXIT_SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   echo_built_in.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymazini <ymazini@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 20:46:19 by ymazini           #+#    #+#             */
/*   Updated: 2025/05/09 17:59:58 by ymazini          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../exec_header.h"

static	int	ft_check_n_flag(char *s)
{
	int	i;

	i = 0;
	if (s && s[0] == '-' && s[1] == 'n')
	{
		i = 2;
		while (s[i] == 'n')
			i++;
		return (s[i] == '\0');
	}
	return (0);
}

int	get_printing_start_index(t_cmd *cmd)
{
	int	i;

	i = 1;
	while (cmd->argv[i])
	{
		if (ft_check_n_flag(cmd->argv[i]))
			i++;
		else
			break ;
	}
	if (cmd->argv[i] == NULL)
		return (i);
	return (i);
}

void	prepare_echo(t_cmd *cmd, int *print_newline_flag, int *start_index)
{
	int	i;

	i = 1;
	*print_newline_flag = TRUE;
	while (cmd->argv[i])
	{
		if (ft_check_n_flag(cmd->argv[i])
			|| ft_is_only_whitespace(cmd->argv[i]))
		{
			if (ft_check_n_flag(cmd->argv[i]))
				*print_newline_flag = FALSE;
			i++;
		}
		else
			break ;
	}
	*start_index = get_printing_start_index(cmd);
}

int	ft_echo(t_cmd *cmd, t_data *data)
{
	int	flag_print_newline;
	int	start_index;
	int	i;

	if (!cmd || !cmd->argv || !cmd->argv[0])
	{
		ft_putchar_fd('\n', STDOUT_FILENO);
		data->last_exit_status = EXIT_SUCCESS;
		return (EXIT_SUCCESS);
	}
	prepare_echo(cmd, &flag_print_newline, &start_index);
	i = start_index;
	while (cmd->argv[i])
	{
		ft_putstr_fd(cmd->argv[i], STDOUT_FILENO);
		if (cmd->argv[i + 1] != NULL)
			ft_putchar_fd(' ', STDOUT_FILENO);
		i++;
	}
	if (flag_print_newline == TRUE)
		ft_putchar_fd('\n', STDOUT_FILENO);
	data->last_exit_status = EXIT_SUCCESS;
	return (EXIT_SUCCESS);
}
